// Generated by CoffeeScript 1.4.0

/* Handle integration with Readability API
*/


(function() {
  var OAuth, Readability;

  OAuth = (require('oauth')).OAuth;

  exports.Readability = Readability = (function() {

    function Readability(cfg) {
      var oa;
      this.cfg = cfg;
      this.oa = oa = new OAuth('https://www.readability.com/api/rest/v1/oauth/request_token/', 'https://www.readability.com/api/rest/v1/oauth/access_token/', this.cfg.RDB_CONSUMER_KEY, this.cfg.RDB_CONSUMER_SECRET, '1.0', 'http://localhost:3000/rdb/callback', 'HMAC-SHA1');
      console.log(cfg.RDB_ACCESS_TOKEN);
      console.log(cfg.RDB_ACCESS_TOKEN_SECRET);
    }

    Readability.prototype.getBookmarks = function(callback) {
      return this.oa.getProtectedResource('https://www.readability.com/api/rest/v1/bookmarks', 'GET', this.cfg.RDB_ACCESS_TOKEN, this.cfg.RDB_ACCESS_TOKEN_SECRET, function(error, data, response) {
        if (error) {
          console.log(error);
          return callback('Error: getting OAuth resource: ');
        } else {
          return callback(data);
        }
      });
    };

    Readability.prototype.addBookmark = function(item, callback) {
      return this.oa.post('https://www.readability.com/api/rest/v1/bookmarks', this.cfg.RDB_ACCESS_TOKEN, this.cfg.RDB_ACCESS_TOKEN_SECRET, item, function(error, data, response) {
        if (error) {
          if (error.statusCode = 409) {
            return callback("Warning: Item already exists.");
          } else {
            console.log(error);
            return callback('Error: getting OAuth resource.');
          }
        } else {
          console.log("Successfully added: ");
          console.log(item);
          return callback(data);
        }
      });
    };

    Readability.prototype.login = function(callback) {
      console.log('Getting OAuth Request Token');
      return this.oa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results) {
        if (error) {
          console.log('error :' + JSON.stringify(error));
        }
        return callback({
          oauth_token: oauth_token,
          oauth_token_secret: oauth_token_secret
        });
      });
    };

    Readability.prototype.handleCallback = function(oauth_token, oauth_token_secret, oauth_verifier, callback) {
      return this.oa.getOAuthAccessToken(oauth_token, oauth_token_secret, oauth_verifier, function(error, oauth_access_token, oauth_access_token_secret, response) {
        if (error) {
          console.log('error :' + JSON.stringify(error));
        }
        if (response === void 0) {
          console.log('error: ' + response);
        }
        return callback({
          oauth_access_token: oauth_access_token,
          oauth_access_token_secret: oauth_access_token_secret
        });
      });
    };

    return Readability;

  })();

}).call(this);
