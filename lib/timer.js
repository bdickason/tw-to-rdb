// Generated by CoffeeScript 1.4.0

/* Creates a timer to manage queues
*/


(function() {
  var Timer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  exports.Timer = Timer = (function() {

    function Timer(user_name, cfg, db, tw, rdb) {
      this.checkTweets = __bind(this.checkTweets, this);
      this.cfg = cfg;
      this.db = db;
      this.tw = tw;
      this.rdb = rdb;
      this.id = user_name;
      this.active = false;
      this.interval = {};
      console.log("New timer created for user: " + user_name);
    }

    Timer.prototype.startTimer = function(time, callback) {
      var error,
        _this = this;
      error = null;
      if (this.active === true) {
        console.log("Timer " + this.id + " is already started");
        error = "Error: Timer is already started";
        return callback("Error: Timer is already started");
      } else {
        console.log("Starting Timer for user: " + this.id);
        this.active = true;
        this.interval = setInterval(function() {
          return _this.checkTweets(function(callback) {});
        }, time);
        return callback(error, "Done!");
      }
    };

    Timer.prototype.stopTimer = function(callback) {
      if (this.active === false) {
        console.log("Timer is already stopped");
        return callback("Error: Timer is already stopped");
      } else {
        this.active = false;
        clearInterval(this.interval);
        return callback("Done.");
      }
    };

    /* Support functions
    */


    Timer.prototype.checkTweets = function(callback) {
      var count,
        _this = this;
      count = 10;
      return this.tw.getFavorites(this.id, count, function(callback) {
        var tweet, url, _i, _len, _results;
        console.log("Checking Tweets for: " + _this.id);
        if (callback.length > 0) {
          _results = [];
          for (_i = 0, _len = callback.length; _i < _len; _i++) {
            tweet = callback[_i];
            _results.push((function() {
              var _j, _len1, _ref, _results1;
              _ref = tweet.entities.urls;
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                url = _ref[_j];
                _results1.push(this.rdb.addBookmark(this.id, {
                  url: url.expanded_url
                }, function(cb) {}));
              }
              return _results1;
            }).call(_this));
          }
          return _results;
        }
      });
    };

    return Timer;

  })();

}).call(this);
