// Generated by CoffeeScript 1.4.0
(function() {
  var Readability, Redis, RedisStore, Twitter, app, cfg, checkTweets, express, rdb, redis, tw,
    _this = this;

  express = require('express');

  cfg = require('./cfg/config.js');

  Twitter = (require('./lib/twitter.js')).Twitter;

  Readability = (require('./lib/readability.js')).Readability;

  Redis = require('redis');

  RedisStore = (require('connect-redis'))(express);

  app = express();

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  /* Populates:
     - req.session
     - req.sessionStore
     - req.sessionID
  
   If no DB match for session stored in browser cookie, connect.session generates a new one. 14 day maxAge
  */


  app.use(express.session({
    store: new RedisStore({
      'db': '1',
      maxAge: 1209600000
    }),
    secret: 'blahblahblah'
  }));

  redis = Redis.createClient(cfg.REDIS_PORT, cfg.REDIS_HOSTNAME);

  redis.on('error', function(err) {
    return console.log('REDIS Error:' + err);
  });

  /* Controllers
  */


  tw = new Twitter(cfg);

  rdb = new Readability(cfg);

  /* Routes
  */


  app.get('/', function(req, res) {
    return res.send("<HTML><BODY><A HREF='/tw'>Twitter: Get Favorites</A><br /><A HREF='/rdb/login'>Readability: Get Access Token</A></BODY></HTML>");
  });

  app.get('/logout', function(req, res) {
    req.session.destroy();
    return res.redirect('/');
  });

  app.get('/tw', function(req, res) {
    return tw.getFavorites(20, function(callback) {
      return res.send(callback);
    });
  });

  /* Readability Auth to retrieve access tokens, etc.
  */


  app.get('/rdb/login', function(req, res) {
    return rdb.login(function(callback) {
      req.session.oauth_token = callback.oauth_token;
      req.session.oauth_token_secret = callback.oauth_token_secret;
      return res.redirect("https://www.readability.com/api/rest/v1/oauth/authorize/?oauth_token=" + callback.oauth_token + "&oauth_token_secret=" + callback.oauth_token_secret);
    });
  });

  app.get('/rdb/callback', function(req, res) {
    return rdb.handleCallback(req.query.oauth_token, req.session.oauth_token_secret, req.query.oauth_verifier, function(callback) {
      req.session.oauth_access_token = callback.oauth_access_token;
      req.session.oauth_access_token_secret = callback.oauth_access_token_secret;
      return res.send("<HTML><BODY><A HREF='/'>Home</A><BR /><BR /><STRONG>export RDB_ACCESS_TOKEN='" + req.session.oauth_access_token + "'<BR />export RDB_ACCESS_TOKEN_SECRET='" + req.session.oauth_access_token_secret + "</strong><br /><br /><em>Hint: copy/paste this into ~/.profile</BODY></HTML>");
    });
  });

  /* Support functions
  */


  checkTweets = function() {
    var count;
    console.log('Checking tweets');
    count = 10;
    return tw.getFavorites(count, function(callback) {
      var tweet, url, _i, _len, _results;
      if (callback.length > 0) {
        _results = [];
        for (_i = 0, _len = callback.length; _i < _len; _i++) {
          tweet = callback[_i];
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = tweet.entities.urls;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              url = _ref[_j];
              _results1.push(rdb.addBookmark({
                url: url.expanded_url
              }, function(callback) {}));
            }
            return _results1;
          })());
        }
        return _results;
      }
    });
  };

  /* Start the App
  */


  app.listen('3000');

  checkTweets(function() {});

  setInterval(function() {
    return checkTweets;
  }, 240000);

}).call(this);
